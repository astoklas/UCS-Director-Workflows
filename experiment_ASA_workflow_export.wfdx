<?xml version="1.0" ?><OrchExportInfo><Time>Thu Aug 06 09:57:52 UTC 2015</Time><User>Alexander Stoklasa</User><Comments>Experimental Workflow to genreate an context on a ASA with 3 interfaces
outside, inside: vlan subif from vlan pool
managment: fix Management 0/0
assign IP on mgmt
set static route on mgmt for external networks</Comments><UnifiedFeatureAssetInfo><addiInfo></addiInfo><featureAssetEntry><data>{"checksum":"1609c67505f03d89ff9cf728340b7256c578ac1d","data":""}</data></featureAssetEntry><type>WORKFLOWS</type></UnifiedFeatureAssetInfo><UnifiedFeatureAssetInfo><addiInfo></addiInfo><featureAssetEntry><data><![CDATA[{"taskName":"Create Security Context - 2015-08-05","taskLabel":"Create Security Context - 2015-08-05","isActive":true,"taskSummary":"changed input_type of interfaces matching createSubIf","taskDescription":"","taskDetails":"\r\n<------- Task Information ------->\r\nTask contains 8 inputs\r\n   netdevice (Label: \'Select Device\', Type: embedded-lov, MappableType: networking_device)\r\n   securityContextName (Label: \'Context Name\', Type: text, MappableType: gen_text_input)\r\n   description (Label: \'Context Description\', Type: text, MappableType: gen_text_input)\r\n   fileName (Label: \'File Name\', Type: text, MappableType: gen_text_input)\r\n   interfaceName (Label: \'OutSide Interface Name\', Type: embedded-lov, MappableType: networking_device_interface)\r\n   insideInterfaces (Label: \'Inside Interfaces\', Type: multi-select-list, MappableType: networking_device_interface)\r\n   mode (Label: \'Mode\', Type: embedded-lov, MappableType: gen_text_input)\r\n   copyRunToStartConfig (Label: \'Copy Running configuration to Startup configuration\', Type: boolean, MappableType: null)\r\n\r\nTask contains 9 outputs\r\n   DATACENTER (Description: \'Name of the Datacenter on which the selected operation was performed\', Type: datacenterName)\r\n   DEVICE_IP (Description: \'IP address of the device on which the selected operation was performed\', Type: gen_text_input)\r\n   OUTPUT_NETWORKING_DEVICE (Description: \'Network device on which selected operation performed.\', Type: networking_device)\r\n   OUTPUT_SECURITY_CONTEXT_NAME (Description: \'Security Context name on which selected operation performed.\', Type: networking_security_context_name)\r\n   OUTPUT_SECURITY_CONTEXT_NAME_DESC (Description: \'Security Context Description\', Type: gen_text_input)\r\n   OUTPUT_SECURITY_CONTEXT_CONFIG_FILE_NAME (Description: \'Security Context configuration file Name\', Type: gen_text_input)\r\n   OUTPUT_SECURITY_CONTEXT_OUTSIDE_INTERFACES (Description: \'OutSide Interface name to apply the Context\', Type: ASAInterfaceIdentity)\r\n   OUTPUT_SECURITY_CONTEXT_INSIDE_INTERFACES (Description: \'Inside Interfaces to apply the Context\', Type: ASAInsideInterfaceIdentity)\r\n   OUTPUT_SECURITY_CONTEXT_FIREWALL_MODE (Description: \'Firewall mode\', Type: gen_text_input)\r\n\r\n","taskData":""}]]></data></featureAssetEntry><type>CUSTOM_TASKS</type></UnifiedFeatureAssetInfo><version>2.0</version></OrchExportInfo>